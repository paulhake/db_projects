Distribution of orders: for histogram
subq counts #orders by customer, outer q groups by those counts to create distribution data
SELECT orders, count(*) as num_customers
FROM
(
    SELECT cust_id, count(id) as orders
    FROM interviews.orders
    GROUP BY 1
) a
GROUP BY 1

#GROUPING SETS - for rollups multi in one query
SELECT continent, country, city, SUM(units_sold)
FROM sales
GROUP BY GROUPING SETS (continent,country,city, ()) â€”empty bracket means all rows

#ROLLUP is similar to grouping sets but precalcs diff rollups with one-two and three groups
#CUBE is all combos

#rank - return rank = x, note this does not work unless rank is in subquery, ie
Will not work without the additional SELECT

SELECT * FROM

(SELECT first_name, hire_date,department,salary,
RANK() OVER(PARTITION BY department ORDER BY hire_date)
FROM employees) a
WHERE rank = 1

#rank group into NTILE buckets:
SELECT * FROM

(SELECT first_name, hire_date,department,salary,
NTILE(5) OVER(PARTITION BY department ORDER BY hire_date)
FROM employees) a

#FIRST_VALUE(column) 
SELECT first_name, hire_date,department,salary,
FIRST_VALUE(salary) OVER(PARTITION BY department ORDER BY first_name)
FROM employees
#NTH_VALUE(col,n)

#LEAD/LAG
LAG(col) OVER() as x

#window sum of current and preceding rows
SELECT first_name, hire_date,department,salary,
SUM(salary) OVER(PARTITION BY department ORDER BY hire_date 
				ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM employees

SELECT first_name, hire_date,salary,
SUM(salary) OVER(ORDER BY hire_date 
				RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM employees


#Window functions percent sal of dept salary

SELECT first_name, department,salary,
ROUND(salary / AVG(salary) OVER(PARTITION BY department),2) as under_over
FROM employees
ORDER BY department, under_over DESC
